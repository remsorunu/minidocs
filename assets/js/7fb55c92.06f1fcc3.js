"use strict";(self.webpackChunkminima_docs=self.webpackChunkminima_docs||[]).push([[3159],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=c(n),p=a,d=h["".concat(l,".").concat(p)]||h[p]||m[p]||r;return n?i.createElement(d,o(o({ref:t},u),{},{components:n})):i.createElement(d,o({ref:t},u))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6898:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),o=["components"],s={sidebar_position:7},l="HashCash and Burn",c={unversionedId:"minimawhitepaper/hashcashandburn",id:"minimawhitepaper/hashcashandburn",title:"HashCash and Burn",description:"Adam Backs\u2019 HashCash[9] was the first weaponized version of PoW. A Denial-of-Service (DoS) counter-measure first deployed to prevent email spam. Sending millions of emails \u2018costs\u2019 nothing \u2013 hardware, processing, bandwidth, etc. A lone computer sitting on the internet can send millions of emails in almost no time, constantly. HashCash enforced that a PoW payment was included whenever an email was sent. To a single user sending emails every few minutes, this was utterly negligible, a background process that hummed for a few seconds after you press the \u2018Send\u2019 button. But to the spam-machine sitting on the internet trying to send millions of emails, this would require millions of seconds of work, an impossible task.",source:"@site/docs/minimawhitepaper/hashcashandburn.md",sourceDirName:"minimawhitepaper",slug:"/minimawhitepaper/hashcashandburn",permalink:"/docs/minimawhitepaper/hashcashandburn",editUrl:"https://github.com/minima-global/minidocs/docs/minimawhitepaper/hashcashandburn.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"PoW vs Distributed PoW",permalink:"/docs/minimawhitepaper/powvsdistributedpow"},next:{title:"Energy",permalink:"/docs/minimawhitepaper/energy"}},u={},m=[],h={toc:m};function p(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"hashcash-and-burn"},"HashCash and Burn"),(0,r.kt)("p",null,"Adam Backs\u2019 HashCash",(0,r.kt)("a",{parentName:"p",href:"/docs/minimawhitepaper/specialthanksto"},"[9]")," was the first weaponized version of PoW. A Denial-of-Service (DoS) counter-measure first deployed to prevent email spam. Sending millions of emails \u2018costs\u2019 nothing \u2013 hardware, processing, bandwidth, etc. A lone computer sitting on the internet can send millions of emails in almost no time, constantly. HashCash enforced that a PoW payment was included whenever an email was sent. To a single user sending emails every few minutes, this was utterly negligible, a background process that hummed for a few seconds after you press the \u2018Send\u2019 button. But to the spam-machine sitting on the internet trying to send millions of emails, this would require millions of seconds of work, an impossible task."),(0,r.kt)("p",null,"Negligible PoW stops DoS. Negligible PoW does not stop DDoS."),(0,r.kt)("p",null,"This email attack is a DoS attack because there is only one machine sending the spam. A DDoS attack, a Distributed DoS attack, is when multiple machines are used. A 50,000 strong bot-net of mobile phones, could each send a message every few seconds. A million messages is now only a few minutes of distributed work.\nTo prevent a distributed spam attack on layer 1 of a decentralized P2P blockchain network a small amount of PoW per message is not enough. Small amounts of PoW, to the individual users, are effectively free. Yes, they pay in power usage on their mobile phone, there is a time delay, but you do not notice it. You do not feel it. To prevent a DDoS attack we need something that is not \u2018free\u2019 to users."),(0,r.kt)("p",null,"On miner-centric chains, this is the fee (which serves multiple purposes). The fee must be paid for a transaction to be valid. 1 million messages now require \u20181 million fees\u2019. The cost of the attack is now prohibitive \u2013 since the attacker must pay this, the bot-net only provides PoW. Should the attacker persist none the less, there is an ongoing and non-negligible cost to the attack, that cannot be sustained indefinitely."),(0,r.kt)("p",null,"On Minima this is the Burn (which also serves multiple purposes). A Burn, when the outputs of a transaction sum to less than the inputs, is equivalent to paying every other user a very small fee. Since \u2018burning\u2019 reduces the total number of Minima in circulation, since all coins are created at genesis, those coins that are left are more scarce and therefore more valuable. Unlike fees, the Burn has no minimum. There is no requirement for the total Burn to be large, and able to support the mining industry, that in turn secures the chain. The burn may be high during periods of heavy traffic or spam, and as it rises, traffic will decrease, and the system will self-regulate. The burn can be very low when traffic is at manageable levels as the total amount is not important, only the relative burn amounts in comparison to other transactions."),(0,r.kt)("p",null,"The Burn in Minima serves multiple purposes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A strong incentive to propagate and process a transaction."),(0,r.kt)("li",{parentName:"ul"},"A method for ordering transactions and regulating on-chain traffic."),(0,r.kt)("li",{parentName:"ul"},"A mechanism for spam prevention by making DDoS attacks expensive.")),(0,r.kt)("p",null,"HashCash is totally decentralized. Each user can independently perform the required PoW, by mining their own email, and every other user can independently verify the proof. No third parties are consulted, no miners are paid. Minima is the same, but users mine transactions instead of emails."),(0,r.kt)("p",null,"Constructively, from the maelstrom of transactions fired across the Minima network, a single time-ordered interlocking chain of blocks emerges revealing the complete transaction history."),(0,r.kt)("p",null,"Minima Consensus is driven by HashCash and Burn."))}p.isMDXComponent=!0}}]);