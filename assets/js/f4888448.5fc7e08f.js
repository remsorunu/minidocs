"use strict";(self.webpackChunkminima_docs=self.webpackChunkminima_docs||[]).push([[6852],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=r,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7183:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:7},c="Terminal Commands",l={unversionedId:"runanode/terminal_commands",id:"runanode/terminal_commands",title:"Terminal Commands",description:"The following commands can be run directly from a Minima Terminal:",source:"@site/docs/runanode/terminal_commands.md",sourceDirName:"runanode",slug:"/runanode/terminal_commands",permalink:"/docs/runanode/terminal_commands",editUrl:"https://github.com/minima-global/minidocs/docs/runanode/terminal_commands.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Linux VPS",permalink:"/docs/runanode/linux_vps"},next:{title:"Troubleshooting",permalink:"/docs/runanode/troubleshooting"}},u={},d=[],p={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"terminal-commands"},"Terminal Commands"),(0,o.kt)("p",null,"The following commands can be run directly from a Minima Terminal: "),(0,o.kt)("p",null,"[] are required",(0,o.kt)("br",null),"\n() are optional",(0,o.kt)("br",null),"\n; can be used to chain multiple commands",(0,o.kt)("br",null)),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'"status ":"(clean:true) - Show general status for Minima and clean RAM",\n"printtree ":"(depth:) (cascade:true|false) - Print a tree representation of the blockchain. Depth default 32, Cascade false.",\n"trace ":"[enable:true|false] (filter:) - Show the message stacks of the internal Minima Engine with optional filter string",\n"automine ":"[enable:true|false|single] - Simulate traffic",\n"hashtest ":"(amount:) - Check the speed of hashing of this device. Defaults to 1 million hashes",\n"txpow ":"[txpowid:txpowid] - Search for a specific TxPoW",\n"coins ":"(relevant:true) (sendable:true) (coinid:) (amount:) (address:) (tokenid:) - Search for coins",\n"tokens ":"List all tokens on the chain",\n"keys ":"(private:true|false) (import:) - Get a list of all your public keys and addresses, show private keys or import",\n"newaddress ":"Create a new address or public key",\n"send ":"[address:] [amount:] (tokenid:) (state:{}) - Send Minima or Tokens to an address",\n"balance ":"Show your total balance of Minima and tokens",\n"tokencreate ":"[name:] [amount:] (decimals:) (script:) (state:{}) - Create a token. \'name\' can be a JSON Object",\n"hash ":"[data:] (type:keccak|sha2|sha3)- Hash the data - default KECCAK",\n"scripts ":"[action:list|clean|addscript] (script:) (track:true|false) - Create a new custom script to track or list all scripts",\n"runscript ":"[script:] (clean:true|false) (state:{}) (prevstate:{}) (globals:{}) (signatures:[]) (extrascripts:{}) - Run a script with the defined parameters",\n"tutorial ":"Show a tutorial for Minima scrtipting",\n"mmrcreate ":"[nodes:[]] - Create an MMR Tree of data. Nodes can be STRING / HEX",\n"mmrproof ":"[data:] [proof:] [root:] - Check an MMR proof",\n"coinimport ":"[data:] - Import a coin, and keep tracking it",\n"coinexport ":"[coinid:] - Export a coin",\n"cointrack ":"[enable:true|false] [coinid:] - Track or untrack a coin",\n"sign ":"[publickey:] [data:] - Sign the data with the publickey",\n"verify ":"[publickey:] [data:] [signature:] - Verify a signature",\n"txnlist ":"List current custom transactions",\n"txncreate ":"[id:] - Create a transaction",\n"txndelete ":"[id:] - Delete this custom transaction",\n"txncheck ":"[id:] - Show details about the transaction",\n"txninput ":"[id:] [coinid:] (floating:true|false) - Add a coin as an input to a transaction",\n"txnoutput ":"[id:] [amount:] [address:] (tokenid:) (storestate:) (floating:true|false) - Create a transaction output",\n"txnstate ":"[id:] [port:] [value:] (keeper:) - Add a state variable",\n"txnscript ":"[id:] [scripts:{}] - Add scripts to a txn",\n"txnsign ":"[id:] [publickey:0x..|auto] - Sign a transaction",\n"txnclear ":"[id:] - Clear the Witness data",\n"txnpost ":"[id:] - Post a transaction",\n"txnimport ":"[file:] (id:) - Import a transaction. Optionally specify the ID",\n"txnexport ":"[id:] [file:] - Export a transaction to a file",\n"network ":"Show network status",\n"maxima ":"[action:info|send|sethost] (to:) (application:) (data:) (logs:true|false) - Check your Maxima details, send a message / data, enable logs",\n"message ":"(uid:uid) [data:message] - Send a message over the network to one of your direct peers",\n"connect ":"[host:ip:port] - Connect to a network Minima instance",\n"disconnect ":"[uid:uid] - Disconnect from a connected or connecting host",\n"rpc ":"[enable:true|false] - Enable and disable RPC on port 9002 (default is off)",\n"webhooks ":"(action:list|add|remove|clear) (hook:url) - Add a web hook that is called with Minima events as they happen",\n"sshtunnel ":"[enable:true|false] (user: password: host: remoteport:) - Create an SSH Tunnel for Minima to have an external IP",\n"backup ":"(file:) - Backup the entire system. Uses a timestamped name by default",\n"restore ":"[file:] - Restore the entire system.",\n"incentivecash ":"(uid:) - Show your rewards or specify your UserID for the Incentive Cash program",\n"quit ":"Shutdown Minima"\n')))}m.isMDXComponent=!0}}]);